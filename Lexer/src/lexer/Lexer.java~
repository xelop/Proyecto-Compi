/* The following code was generated by JFlex 1.6.1 */

package lexer;
import static lexer.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./src/lexer/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\44\1\11\1\64\1\64\1\11\22\0\1\10\1\30\1\15"+
    "\1\12\1\0\1\26\1\41\1\22\1\33\1\34\1\24\1\14\1\6"+
    "\1\23\1\13\1\25\1\16\1\4\6\5\2\2\2\0\1\31\1\27"+
    "\1\32\2\0\32\1\1\0\1\63\1\0\1\42\1\1\1\0\1\35"+
    "\1\17\1\51\1\37\1\46\1\7\1\60\1\62\1\53\1\1\1\50"+
    "\1\52\1\57\1\36\1\20\1\55\1\1\1\40\1\45\1\47\1\54"+
    "\1\1\1\61\1\21\1\56\1\1\1\0\1\3\1\0\1\43\6\0"+
    "\1\64\u1fa2\0\1\64\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\3\1\5"+
    "\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\1\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\3\1\4\1\25\1\5\1\6\1\26"+
    "\2\25\1\10\1\11\1\12\1\13\1\14\1\25\1\15"+
    "\1\16\1\17\1\20\4\25\1\21\1\22\1\23\1\24"+
    "\11\25\1\27\1\0\1\30\1\0\1\31\4\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\4\25\1\31\2\25\1\46\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\16\25\1\47\1\50\1\51\5\25"+
    "\1\52\1\53\1\54\1\55\1\56\1\0\2\30\1\57"+
    "\1\60\1\61\1\62\5\25\1\60\1\61\1\63\1\25"+
    "\1\64\1\65\7\25\1\66\4\25\1\67\5\25\1\30"+
    "\1\70\2\25\1\71\5\25\1\72\1\25\1\73\1\74"+
    "\3\25\1\75\1\25\1\76\3\25\1\77\1\25\1\100"+
    "\1\25\1\101\4\25\1\102\2\25\1\103\1\25\1\104"+
    "\1\25\1\105\1\106\1\107\1\110\1\25\1\111\1\112"+
    "\1\113\1\114\1\25\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\152\0\152\0\u0109"+
    "\0\u013e\0\u0173\0\152\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\152\0\u02b1\0\u02e6\0\u031b\0\u0350\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\u0385\0\u0385\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\152\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0385"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0385\0\u0385\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u0385\0\u0385\0\u0385\0\u0385\0\u070a\0\u073f"+
    "\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\324\0\152\0\u091c\0\152\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\152\0\u0a25\0\152\0\u0a5a\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0385\0\u0b63\0\u0b98\0\u0385\0\u0385\0\u0bcd\0\u0385\0\u0c02"+
    "\0\u0385\0\u0385\0\u0385\0\u0385\0\u0385\0\u0385\0\u0385\0\u0385"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0385\0\u0f1d"+
    "\0\u0385\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\152\0\152"+
    "\0\152\0\152\0\152\0\u105b\0\u0986\0\u09bb\0\152\0\152"+
    "\0\152\0\u0385\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u0385"+
    "\0\u0385\0\u0385\0\u1199\0\u0385\0\u0385\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u0385\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u0385\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u105b"+
    "\0\u0385\0\u151e\0\u1553\0\u0385\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\u0385\0\u1691\0\u0385\0\u0385\0\u16c6\0\u16fb\0\u1730"+
    "\0\u0385\0\u1765\0\u0385\0\u179a\0\u17cf\0\u1804\0\u0385\0\u1839"+
    "\0\u0385\0\u186e\0\u0385\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u0385"+
    "\0\u1977\0\u19ac\0\u0385\0\u19e1\0\u0385\0\u1a16\0\u0385\0\u0385"+
    "\0\u0385\0\u0385\0\u1a4b\0\u0385\0\u0385\0\u0385\0\u0385\0\u1a80"+
    "\0\u0385";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\5\1\7\1\4\2\6"+
    "\1\10\1\11\1\12\1\13\1\14\3\4\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\4\4\1\30\1\31\1\32\1\33\16\4\1\3"+
    "\1\0\3\34\1\35\2\34\1\36\1\37\1\35\1\6"+
    "\1\10\1\40\1\41\1\42\1\34\1\43\1\44\2\34"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\34\1\72\1\73"+
    "\1\74\1\34\1\75\2\34\1\76\1\77\1\34\1\100"+
    "\1\34\66\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\4\4\13\0\4\4\4\0\16\4\4\0\1\101\1\102"+
    "\2\101\1\102\1\0\2\102\1\0\1\103\1\102\1\0"+
    "\1\101\4\0\1\102\41\0\11\10\1\6\53\10\14\0"+
    "\1\6\77\0\1\104\37\0\1\101\1\102\2\101\1\102"+
    "\1\0\2\102\1\0\1\103\1\102\1\0\1\101\1\105"+
    "\1\106\1\107\1\0\1\102\41\0\11\110\1\0\53\110"+
    "\27\0\1\111\61\0\1\112\2\0\1\113\62\0\1\114"+
    "\1\0\1\115\64\0\1\116\64\0\1\117\64\0\1\120"+
    "\1\0\1\121\1\122\61\0\1\123\2\0\1\124\32\0"+
    "\11\34\1\0\3\34\1\0\45\34\1\0\12\34\1\0"+
    "\3\34\1\0\2\34\1\125\17\34\1\126\11\34\1\127"+
    "\1\130\7\34\1\0\12\34\1\0\2\34\1\35\1\0"+
    "\45\34\1\0\12\34\1\0\3\34\1\0\11\34\1\131"+
    "\33\34\1\0\12\34\1\0\3\34\1\0\2\34\1\132"+
    "\17\34\1\133\22\34\1\0\12\34\1\0\3\34\1\0"+
    "\22\34\1\134\22\34\1\0\12\34\1\0\3\34\1\0"+
    "\11\34\1\135\33\34\1\0\12\34\1\0\3\34\1\0"+
    "\6\34\1\136\2\34\1\137\33\34\1\0\12\34\1\0"+
    "\3\34\1\0\7\34\1\140\1\34\1\141\33\34\1\0"+
    "\12\34\1\0\3\34\1\0\11\34\1\142\33\34\1\0"+
    "\12\34\1\0\3\34\1\0\11\34\1\143\33\34\1\0"+
    "\12\34\1\0\3\34\1\0\11\34\1\144\1\34\1\145"+
    "\1\146\30\34\1\0\12\34\1\0\3\34\1\0\11\34"+
    "\1\147\2\34\1\150\30\34\1\0\12\34\1\0\3\34"+
    "\1\0\20\34\1\151\6\34\1\152\15\34\1\0\12\34"+
    "\1\0\3\34\1\0\2\34\1\153\42\34\1\0\12\34"+
    "\1\0\3\34\1\0\30\34\1\154\14\34\1\0\12\34"+
    "\1\0\3\34\1\0\17\34\1\155\10\34\1\156\14\34"+
    "\1\0\12\34\1\0\3\34\1\0\31\34\1\157\13\34"+
    "\1\0\12\34\1\0\3\34\1\0\3\34\1\160\30\34"+
    "\1\161\10\34\1\0\12\34\1\0\3\34\1\0\22\34"+
    "\1\162\22\34\1\0\12\34\1\0\3\34\1\0\2\34"+
    "\1\163\31\34\1\164\10\34\1\0\12\34\1\0\3\34"+
    "\1\0\17\34\1\165\15\34\1\166\7\34\1\0\10\34"+
    "\1\167\1\34\1\0\3\34\1\0\20\34\1\170\6\34"+
    "\1\171\11\34\1\172\3\34\1\0\12\34\1\0\3\34"+
    "\1\0\17\34\1\173\2\34\1\174\22\34\1\0\12\34"+
    "\1\0\3\34\1\0\34\34\1\175\10\34\1\0\12\34"+
    "\1\0\3\34\1\0\44\34\1\176\1\0\1\34\15\0"+
    "\1\177\20\0\1\200\1\0\1\201\6\0\1\202\17\0"+
    "\1\203\1\0\2\203\10\0\1\203\51\0\2\204\11\0"+
    "\1\204\52\0\2\205\10\0\1\205\50\0\4\206\1\0"+
    "\1\206\6\0\2\206\15\0\1\206\1\0\1\206\6\0"+
    "\1\206\2\0\1\206\35\0\1\207\71\0\1\210\64\0"+
    "\1\211\35\0\11\34\1\0\3\34\1\0\22\34\1\212"+
    "\22\34\1\0\12\34\1\0\3\34\1\0\2\34\1\213"+
    "\42\34\1\0\12\34\1\0\3\34\1\0\2\34\1\214"+
    "\42\34\1\0\12\34\1\0\3\34\1\0\20\34\1\215"+
    "\24\34\1\0\12\34\1\0\3\34\1\0\2\34\1\216"+
    "\42\34\1\0\12\34\1\0\3\34\1\0\30\34\1\217"+
    "\14\34\1\0\12\34\1\0\3\34\1\0\11\34\1\220"+
    "\33\34\1\0\12\34\1\0\3\34\1\0\11\34\1\221"+
    "\33\34\1\0\12\34\1\0\3\34\1\0\21\34\1\222"+
    "\23\34\1\0\12\34\1\0\3\34\1\0\27\34\1\223"+
    "\15\34\1\0\12\34\1\0\3\34\1\0\22\34\1\224"+
    "\22\34\1\0\10\34\1\225\1\34\1\0\3\34\1\0"+
    "\34\34\1\225\10\34\1\0\12\34\1\0\3\34\1\0"+
    "\35\34\1\226\7\34\1\0\12\34\1\0\3\34\1\0"+
    "\31\34\1\227\13\34\1\0\12\34\1\0\3\34\1\0"+
    "\22\34\1\230\22\34\1\0\12\34\1\0\3\34\1\0"+
    "\30\34\1\231\2\34\1\232\11\34\1\0\12\34\1\0"+
    "\3\34\1\0\27\34\1\233\5\34\1\234\7\34\1\0"+
    "\12\34\1\0\3\34\1\0\40\34\1\235\4\34\1\0"+
    "\12\34\1\0\3\34\1\0\20\34\1\236\24\34\1\0"+
    "\12\34\1\0\3\34\1\0\17\34\1\237\25\34\1\0"+
    "\12\34\1\0\3\34\1\0\41\34\1\240\3\34\1\0"+
    "\12\34\1\0\3\34\1\0\27\34\1\241\15\34\1\0"+
    "\12\34\1\0\3\34\1\0\31\34\1\242\13\34\1\0"+
    "\12\34\1\0\3\34\1\0\37\34\1\243\5\34\1\0"+
    "\12\34\1\0\3\34\1\0\27\34\1\244\15\34\1\0"+
    "\12\34\1\0\3\34\1\0\35\34\1\245\7\34\1\0"+
    "\12\34\1\0\3\34\1\0\2\34\1\246\42\34\1\0"+
    "\12\34\1\0\3\34\1\0\35\34\1\247\7\34\1\0"+
    "\1\34\3\0\1\250\1\204\1\0\1\102\1\0\2\102"+
    "\2\0\1\102\1\0\1\204\4\0\1\102\41\0\11\34"+
    "\1\0\3\34\1\0\41\34\1\251\3\34\1\0\12\34"+
    "\1\0\3\34\1\0\17\34\1\252\25\34\1\0\12\34"+
    "\1\0\3\34\1\0\17\34\1\253\25\34\1\0\12\34"+
    "\1\0\3\34\1\0\34\34\1\254\10\34\1\0\12\34"+
    "\1\0\3\34\1\0\17\34\1\255\25\34\1\0\12\34"+
    "\1\0\3\34\1\0\30\34\1\256\14\34\1\0\12\34"+
    "\1\0\3\34\1\0\27\34\1\257\15\34\1\0\12\34"+
    "\1\0\3\34\1\0\36\34\1\260\6\34\1\0\12\34"+
    "\1\0\3\34\1\0\35\34\1\261\7\34\1\0\12\34"+
    "\1\0\3\34\1\0\33\34\1\262\11\34\1\0\12\34"+
    "\1\0\3\34\1\0\30\34\1\263\14\34\1\0\12\34"+
    "\1\0\3\34\1\0\30\34\1\264\14\34\1\0\10\34"+
    "\1\265\1\34\1\0\3\34\1\0\45\34\1\0\12\34"+
    "\1\0\3\34\1\0\31\34\1\266\13\34\1\0\12\34"+
    "\1\0\3\34\1\0\27\34\1\267\15\34\1\0\12\34"+
    "\1\0\3\34\1\0\1\34\1\270\43\34\1\0\12\34"+
    "\1\0\3\34\1\0\31\34\1\271\13\34\1\0\12\34"+
    "\1\0\3\34\1\0\2\34\1\272\42\34\1\0\12\34"+
    "\1\0\3\34\1\0\27\34\1\273\15\34\1\0\12\34"+
    "\1\0\3\34\1\0\20\34\1\274\24\34\1\0\12\34"+
    "\1\0\3\34\1\0\1\34\1\275\43\34\1\0\12\34"+
    "\1\0\3\34\1\0\34\34\1\276\10\34\1\0\12\34"+
    "\1\0\3\34\1\0\31\34\1\277\13\34\1\0\12\34"+
    "\1\0\3\34\1\0\34\34\1\300\10\34\1\0\12\34"+
    "\1\0\3\34\1\0\32\34\1\301\12\34\1\0\12\34"+
    "\1\0\3\34\1\0\22\34\1\302\22\34\1\0\12\34"+
    "\1\0\3\34\1\0\30\34\1\303\14\34\1\0\12\34"+
    "\1\0\3\34\1\0\22\34\1\304\22\34\1\0\12\34"+
    "\1\0\3\34\1\0\20\34\1\305\24\34\1\0\12\34"+
    "\1\0\3\34\1\0\37\34\1\306\5\34\1\0\12\34"+
    "\1\0\3\34\1\0\35\34\1\307\7\34\1\0\12\34"+
    "\1\0\3\34\1\0\27\34\1\310\15\34\1\0\12\34"+
    "\1\0\3\34\1\0\21\34\1\311\23\34\1\0\12\34"+
    "\1\0\3\34\1\0\22\34\1\312\22\34\1\0\12\34"+
    "\1\0\3\34\1\0\31\34\1\313\13\34\1\0\12\34"+
    "\1\0\3\34\1\0\17\34\1\314\25\34\1\0\12\34"+
    "\1\0\3\34\1\0\30\34\1\315\14\34\1\0\12\34"+
    "\1\0\3\34\1\0\34\34\1\316\10\34\1\0\12\34"+
    "\1\0\3\34\1\0\31\34\1\317\13\34\1\0\12\34"+
    "\1\0\3\34\1\0\20\34\1\320\24\34\1\0\12\34"+
    "\1\0\3\34\1\0\42\34\1\321\2\34\1\0\12\34"+
    "\1\0\3\34\1\0\31\34\1\322\13\34\1\0\12\34"+
    "\1\0\3\34\1\0\20\34\1\323\24\34\1\0\12\34"+
    "\1\0\3\34\1\0\17\34\1\324\25\34\1\0\12\34"+
    "\1\0\3\34\1\0\31\34\1\325\13\34\1\0\12\34"+
    "\1\0\3\34\1\0\34\34\1\326\10\34\1\0\12\34"+
    "\1\0\3\34\1\0\40\34\1\327\4\34\1\0\12\34"+
    "\1\0\3\34\1\0\36\34\1\330\6\34\1\0\12\34"+
    "\1\0\3\34\1\0\30\34\1\331\14\34\1\0\1\34";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6837];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\2\11\3\1\1\11\5\1\1\11"+
    "\4\1\6\11\6\1\1\11\36\1\1\0\1\11\1\0"+
    "\1\11\4\0\1\11\1\1\1\11\1\1\10\11\52\1"+
    "\5\11\1\0\2\1\3\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //esto se copia directamente

    StringBuffer string = new StringBuffer();

    public String lexeme;
    public int getLine(){
        return yyline;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext();return ERROR;
            }
          case 78: break;
          case 2: 
            { lexeme=yytext(); return Identificador;
            }
          case 79: break;
          case 3: 
            { /* ignore */
            }
          case 80: break;
          case 4: 
            { lexeme = yytext(); return opComa;
            }
          case 81: break;
          case 5: 
            { lexeme = yytext(); return opPunto;
            }
          case 82: break;
          case 6: 
            { lexeme = yytext(); return opSuma;
            }
          case 83: break;
          case 7: 
            { string.setLength(0); yybegin(STRING);
            }
          case 84: break;
          case 8: 
            { lexeme = yytext(); return opResta;
            }
          case 85: break;
          case 9: 
            { lexeme = yytext(); return opMult;
            }
          case 86: break;
          case 10: 
            { lexeme = yytext(); return opDiv;
            }
          case 87: break;
          case 11: 
            { lexeme = yytext(); return opMod;
            }
          case 88: break;
          case 12: 
            { lexeme = yytext(); return opIgual;
            }
          case 89: break;
          case 13: 
            { lexeme = yytext(); return opMenorQue;
            }
          case 90: break;
          case 14: 
            { lexeme = yytext(); return opMayorQue;
            }
          case 91: break;
          case 15: 
            { lexeme = yytext(); return opParentesis1;
            }
          case 92: break;
          case 16: 
            { lexeme = yytext(); return opParentesis2;
            }
          case 93: break;
          case 17: 
            { lexeme = yytext(); return opANDBits;
            }
          case 94: break;
          case 18: 
            { lexeme = yytext(); return opXOR;
            }
          case 95: break;
          case 19: 
            { lexeme = yytext(); return opNOTBits;
            }
          case 96: break;
          case 20: 
            { lexeme = yytext(); return opTAB;
            }
          case 97: break;
          case 21: 
            { string.append( yytext() );
            }
          case 98: break;
          case 22: 
            { yybegin(YYINITIAL);
                                   lexeme = string.toString();
                                   return MYSTRING;
            }
          case 99: break;
          case 23: 
            { string.append('\\');
            }
          case 100: break;
          case 24: 
            { lexeme=yytext(); return INT;
            }
          case 101: break;
          case 25: 
            { lexeme = yytext(); return opMasIgual;
            }
          case 102: break;
          case 26: 
            { lexeme = yytext(); return opMenosIgual;
            }
          case 103: break;
          case 27: 
            { lexeme = yytext(); return opExponente;
            }
          case 104: break;
          case 28: 
            { lexeme = yytext(); return opMulIgual;
            }
          case 105: break;
          case 29: 
            { lexeme = yytext(); return opDivEntera;
            }
          case 106: break;
          case 30: 
            { lexeme = yytext(); return opDivIgual;
            }
          case 107: break;
          case 31: 
            { lexeme = yytext(); return opExactamenteIgual;
            }
          case 108: break;
          case 32: 
            { lexeme = yytext(); return opDiferencia;
            }
          case 109: break;
          case 33: 
            { lexeme = yytext(); return opMenorOIgual;
            }
          case 110: break;
          case 34: 
            { lexeme = yytext(); return opShiftIzquierdo;
            }
          case 111: break;
          case 35: 
            { lexeme = yytext(); return opDiferencia2;
            }
          case 112: break;
          case 36: 
            { lexeme = yytext(); return opMayorOIgual;
            }
          case 113: break;
          case 37: 
            { lexeme = yytext(); return opShiftDerecho;
            }
          case 114: break;
          case 38: 
            { lexeme = yytext(); return opORLog;
            }
          case 115: break;
          case 39: 
            { lexeme = yytext(); return rIf;
            }
          case 116: break;
          case 40: 
            { lexeme = yytext(); return rIn;
            }
          case 117: break;
          case 41: 
            { lexeme = yytext(); return rIs;
            }
          case 118: break;
          case 42: 
            { string.append('\"');
            }
          case 119: break;
          case 43: 
            { string.append('\n');
            }
          case 120: break;
          case 44: 
            { string.append('\r');
            }
          case 121: break;
          case 45: 
            { string.append('\t');
            }
          case 122: break;
          case 46: 
            { lexeme=yytext(); return FLOAT;
            }
          case 123: break;
          case 47: 
            { lexeme=yytext(); return CHAR;
            }
          case 124: break;
          case 48: 
            { lexeme = yytext(); return opExponenteIgual;
            }
          case 125: break;
          case 49: 
            { lexeme = yytext(); return opDivEnteraIgual;
            }
          case 126: break;
          case 50: 
            { lexeme = yytext(); return rFor;
            }
          case 127: break;
          case 51: 
            { lexeme = yytext(); return opANDLog;
            }
          case 128: break;
          case 52: 
            { lexeme = yytext(); return opNOTLog;
            }
          case 129: break;
          case 53: 
            { lexeme = yytext(); return rDel;
            }
          case 130: break;
          case 54: 
            { lexeme = yytext(); return rTry;
            }
          case 131: break;
          case 55: 
            { lexeme = yytext(); return rInt;
            }
          case 132: break;
          case 56: 
            { lexeme = yytext(); return rFrom;
            }
          case 133: break;
          case 57: 
            { lexeme = yytext(); return rBool;
            }
          case 134: break;
          case 58: 
            { lexeme = yytext(); return rExec;
            }
          case 135: break;
          case 59: 
            { lexeme = yytext(); return rElse;
            }
          case 136: break;
          case 60: 
            { lexeme = yytext(); return rElif;
            }
          case 137: break;
          case 61: 
            { lexeme = yytext(); return rList;
            }
          case 138: break;
          case 62: 
            { lexeme = yytext(); return rPass;
            }
          case 139: break;
          case 63: 
            { lexeme = yytext(); return rFloat;
            }
          case 140: break;
          case 64: 
            { lexeme = yytext(); return rBreak;
            }
          case 141: break;
          case 65: 
            { lexeme = yytext(); return rRaise;
            }
          case 142: break;
          case 66: 
            { lexeme = yytext(); return rClass;
            }
          case 143: break;
          case 67: 
            { lexeme = yytext(); return rPrint;
            }
          case 144: break;
          case 68: 
            { lexeme = yytext(); return rWhile;
            }
          case 145: break;
          case 69: 
            { lexeme = yytext(); return rAssert;
            }
          case 146: break;
          case 70: 
            { lexeme = yytext(); return rReturn;
            }
          case 147: break;
          case 71: 
            { lexeme = yytext(); return rString;
            }
          case 148: break;
          case 72: 
            { lexeme = yytext(); return rExcept;
            }
          case 149: break;
          case 73: 
            { lexeme = yytext(); return rLambda;
            }
          case 150: break;
          case 74: 
            { lexeme = yytext(); return rImport;
            }
          case 151: break;
          case 75: 
            { lexeme = yytext(); return rGlobal;
            }
          case 152: break;
          case 76: 
            { lexeme = yytext(); return rFinally;
            }
          case 153: break;
          case 77: 
            { lexeme = yytext(); return rContinue;
            }
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
